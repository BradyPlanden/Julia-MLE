using  Distributions, Plots, BenchmarkTools, SPGBox, ForwardDiff, PGFPlotsX, Colors
"""
This script computes the maximum likelihood estimation for polynomial coefficients of third-order 
given a random distribution of generated data with noise.

"""
# Data Generation
function gen(n, A, β, X)
    ϵ = randn(n) * A
    return (β[1] .+ X * β[2] .+ X.^2 * β[3] .+ X.^3 * β[4]) .+ ϵ
end

# Log Likelihood
function log_lkhd(n, A, β, X, y) 
    ŷ = gen(n,A,β,X)
    return -sum(logpdf.(Normal(0,1),y-ŷ))/n
end

# Maximum Likelihood Estimation (Mutated in-place)
function Coeffs!(β̂, n, A, X, y, nvar)
    spgbox!(β -> log_lkhd(n, A, β, X, y),(g,β) -> ForwardDiff.gradient!(g,β -> log_lkhd(n, A, β, X, y),β), β̂, nitmax = 100)
end


# Initialise variables
nvar, n = 2, 201
A = 1. # Noise Amplitude
β = [0.5,1.6,7,3.2] # Polynomial coeffs.
β̂ = zeros(4) # Initial MLE coeffs.

# Generate Data
X = rand(Normal(0,1), n, nvar-1)
y = gen(n,A,β,X)

# Generated Data Plot
scatter(X, y, ylabel = "Output", xlabel = "Input", label="Truth", legend=:topleft, size=(720,540))

# MLE + Benchmark
@show @benchmark Coeffs!(β̂,n,A,X,y,nvar)

# Assess Results
μ =  β-β̂
ŷ = gen(n,0.,β̂,X)
ψ = sortslices([X[:] ŷ[:]], dims=1)

# MLE + Data Plot
plot!(ψ[:,1], ψ[:,2], ylabel = "Output", xlabel = "Input", label="Prediction", legend=:topleft, size=(720,540))

# Plot using PGFPlots for Presentation
κ = distinguishable_colors(10)
@pgf Axis(
    {
        xlabel = "Input",
        ylabel = "Ouput",
        clip_mode="individual",
        title = "Maximum Likelihood Coefficents",
        height = "10.5cm", 
        width = "14cm",
    },
    Plot({"only marks", color=κ[10]},
        Table([:x => X, :y =>y])
        ),
    Plot({color=κ[5], "thick"},
    Table([:x => ψ[:,1], :y =>ψ[:,2]])
    )
)